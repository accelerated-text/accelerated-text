### Enums ----------------------------------------------------------------------

enum DefaultUsage {
    YES
    NO
}

enum Usage {
    YES
    NO
    DONT_CARE
}

#   Taken from: https://www.clips.uantwerpen.be/pages/mbsp-tags
enum PartOfSpeech {
   A
   A2
   compoundA
   Adv
   N
   N2
   N3
   PN
   Prep
   V
   V0
   V2
   V3
   V2A
   V2Q
   V2S
   V2V
   VA
   VP
   VQ
   VS
   VV
}

### Data -----------------------------------------------------------------------

type Field {
    id:                 ID!
    fieldName:          String!
    value:              String!
}

type Record {
    id:                 ID!
    fields:             [ Field ]
}

type DataFile {
    id:                 ID!
    fileName:           String!
    fieldNames:         [ String ]
    records:            [ Record ]
    recordOffset:       Int!
    recordLimit:        Int!
    recordCount:        Int!
}

type DataFiles {
    dataFiles:          [ DataFile ]
    offset:             Int!
    limit:              Int!
    totalCount:         Int!
}

type DataFileInput {
    id:                 ID!
    filename:           String!
    content:            String!
}

### Thesaurus ------------------------------------------------------------------

type ThesaurusResults {
    words:              [ Word! ]!
    offset:             Int!
    limit:              Int
    totalCount:         Int!
}

type Synonyms {
    rootWord:           Word!
    synonyms:           [ Word! ]!
}

type Word {
    id:                 ID!
    partOfSpeech:       PartOfSpeech!
    text:               String!
    concept:            Concept
    # predicate
    # stem
}


### Editor & Organization ------------------------------------------------------

type Editor {
    id:                 ID!
    fullName:           String!
    email:              String
    organization:       Organization!
}

type Organization {
    id:                 ID!
    name:               String!
    concepts:           Concepts!
    dictionary:         DictionaryResults!
    readerFlags:        ReaderFlags!
}


### Reader ---------------------------------------------------------------------

type ReaderFlags {
    id:                ID!
    flags:             [ ReaderFlag! ]!
}

type Languages {
    id:                ID!
    flags:             [ ReaderFlag! ]!
}

type ReaderFlag {
    id:                 ID!
    name:               String!
    defaultUsage:       Usage!
}


### Dictionary -----------------------------------------------------------------

type DictionaryResults {
    items:              [ DictionaryItem! ]!
    offset:             Int!
    limit:              Int
    totalCount:         Int!
}

type DictionaryItem {
    id:                 ID!
    name:               String!
    partOfSpeech:       PartOfSpeech
    phrases:            [ Phrase! ]
    concept:            Concept
}

type Phrase {
    id:                 ID!
    text:               String!
    defaultUsage:       DefaultUsage!
    readerFlagUsage:    [ ReaderFlagUsage! ]!
}

type ReaderFlagUsage {
    id:                 ID!
    flag:               ReaderFlag!
    usage:              Usage!
}


### AMR ------------------------------------------------------------------------

type ThematicRole {
    id:                ID!
    fieldType:         [ String! ]
    fieldLabel:        String!
}

type Concept {
    id:                ID!
    kind:              String
    label:             String!
    name:              String!
    roles:             [ ThematicRole! ]
    helpText:          String!
}

type Concepts {
    id:                ID!
    concepts:          [ Concept! ]
    amr:               [ Concept! ]
    rgl:               [ Concept! ]
    paradigms:         [ Concept! ]
    structural:        [ Concept! ]
    grammar:           [ Concept! ]
    ParadigmsEng:      [ Concept! ]
    ParadigmsGer:      [ Concept! ]
    ParadigmsEst:      [ Concept! ]
    ParadigmsLav:      [ Concept! ]
    ParadigmsRus:      [ Concept! ]
    ParadigmsSpa:      [ Concept! ]
}


### DocumentPlan --------------------------------------------------------------

type DocumentPlan {
    id:                ID!
    uid:               ID!
    name:              String!
    kind:              String
    blocklyXml:        String!
    documentPlan:      String!
    dataSampleId:      ID
    dataSampleRow:     Int
    dataSampleMethod:  String
    createdAt:         Int!
    updatedAt:         Int
    updateCount:       Int!
}

type DocumentPlanResults {
    items:             [ DocumentPlan! ]
    offset:            Int!
    limit:             Int!
    kind:              String!
    totalCount:        Int!
}


### QuickSearch ----------------------------------------------------------------

union QuickSearchItem = Concept | DictionaryItem | Word

type QuickSearchResults {
    items:              [ QuickSearchItem! ]!
    offset:             Int!
    limit:              Int
    totalCount:         Int!
}

### Queries --------------------------------------------------------------------

type Query {

    ### Data

    getDataFile(
        id:                 ID!
        recordOffset:       Int
        recordLimit:        Int
    ): DataFile

    getRelevantSamples(
        id:                 ID!
        method:             String!
        recordLimit:        Int
    ): DataFile

    listDataFiles(
        offset:             Int
        limit:              Int
        recordOffset:       Int
        recordLimit:        Int
    ): DataFiles!

    ### Thesaurus

    searchThesaurus(
        query:              String!
        partOfSpeech:       PartOfSpeech
    ):  ThesaurusResults!

    synonyms(
        wordId:             ID!
    ):  Synonyms!

    ### Editor & Organization

    me:                     Editor!

    ### Reader

    readerFlags:            ReaderFlags!

    languages:              Languages!

    ### Dictionary

    dictionary:             DictionaryResults!

    dictionaryItem(
        id:                 ID!
    ):  DictionaryItem


    ### DocumentPlan

    documentPlans(
        offset:             Int
        limit:              Int
        kind:               String
    ):  DocumentPlanResults!

    documentPlan(
        id:                 ID
        name:               String
        kind:               String
    ):  DocumentPlan

    ### AMR
    concepts(
        kind:               String
    ): Concepts!

    concept(
        id:                 ID!
    ):  Concept

    ### quickSearch

    quickSearch(
        query:              String
    ):  QuickSearchResults!
}


### Mutations ------------------------------------------------------------------

type Mutation {

    ### Dictionary

    createDictionaryItem(
        id:                 ID
        name:               String!
        partOfSpeech:       PartOfSpeech  # default = VB
    ):  DictionaryItem!

    updateDictionaryItem(
        id:                 ID!
        name:               String
        partOfSpeech:       PartOfSpeech
    ):  DictionaryItem!

    deleteDictionaryItem(
        id:                 ID!
    ): Boolean!

    addConcept(
        id:                 String!
        content:            String!
    ): Concept!

    deleteConcept(
        id:                 String!
    ): Boolean!

    createDocumentPlan(
        id:                 ID
        uid:                ID!
        name:               String!
        kind:               String
        blocklyXml:         String!
        documentPlan:       String!
        dataSampleId:       ID
        dataSampleRow:      Int
        dataSampleMethod:   String
    ): DocumentPlan!

    deleteDocumentPlan(
        id:                 ID!
    ): Boolean!

    updateDocumentPlan(
        id:                 ID!
        uid:                ID
        name:               String
        kind:               String
        blocklyXml:         String
        documentPlan:       String
        dataSampleId:       ID
        dataSampleRow:      Int
        dataSampleMethod:   String
    ): DocumentPlan!

    createPhrase(
        dictionaryItemId:   ID!
        text:               String!
        defaultUsage:       DefaultUsage  # default = YES
    ):  DictionaryItem!

    updatePhrase(
        id:                 ID!
        text:               String!
    ):  Phrase!

    deletePhrase(
        id:                 ID!
    ):  DictionaryItem!

    updatePhraseDefaultUsage(
        id:                 ID!
        defaultUsage:       DefaultUsage!
    ):  Phrase!

    updateReaderFlagUsage(
        id:                 ID!
        usage:              Usage!
    ):  ReaderFlagUsage!

    updateLanguageUsage(
        id:                 ID!
        usage:              Usage!
    ):  ReaderFlagUsage!

    createDataFile(
        id:                 ID
        filename:           String
        content:            String
    ):  DataFileInput
}


### Schema ---------------------------------------------------------------------

schema {
    query:              Query
    mutation:           Mutation
}
