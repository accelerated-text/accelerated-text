trigger:
- master

pr:
- master

jobs:
  - job: unit_test_backend
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          curl -O https://download.clojure.org/install/linux-install-1.10.1.492.sh
          chmod +x linux-install-1.10.1.492.sh
          sudo ./linux-install-1.10.1.492.sh

      - script: |
          cd core
          clojure -A:test -e integration

      - script: |
          cd api
          clojure -A:test -e integration

  - job: lint_backend
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          curl -O https://download.clojure.org/install/linux-install-1.10.1.492.sh
          chmod +x linux-install-1.10.1.492.sh
          sudo ./linux-install-1.10.1.492.sh
      - script: |
          curl -O https://raw.githubusercontent.com/borkdude/clj-kondo/master/script/install-clj-kondo
          chmod +x install-clj-kondo
          sudo ./install-clj-kondo
      - script: |
          cd api
          clj-kondo --lint src test
      - script: |
          cd core
          clj-kondo --lint src test

# TODO: fix test timeout
# - job: test_frontend
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '11'
#     - script: |
#         cd front-end
#         make test
      
  - job: api_integration_tests
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn:
      - unit_test_backend
    steps:
      - task: DockerCompose@0
        displayName: Build Integration tests dependencies
        inputs:
          dockerComposeFile: api/docker-compose.test.yml
          projectName: $(Build.Repository.Name)
          dockerComposeCommand: build

      - task: DockerCompose@0
        displayName: Run Integration tests
        inputs:
          dockerComposeFile: api/docker-compose.test.yml
          projectName: $(Build.Repository.Name)
          dockerComposeCommand: up --remove-orphans --abort-on-container-exit --exit-code-from api

      - script: |
          python -m pip install --upgrade pip
          pip install coverage
        displayName: 'Install coverage'

      - script: |
          bash <(curl -s https://codecov.io/bash) -s api/.stats/coverage/api -F api
        displayName: 'Upload to codecov.io'


  - job: core_integration_tests
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn:
      - unit_test_backend
    steps:
      - task: DockerCompose@0
        displayName: Build Integration tests dependencies
        inputs:
          dockerComposeFile: core/docker-compose.test.yml
          projectName: $(Build.Repository.Name)
          dockerComposeCommand: build

      - task: DockerCompose@0
        displayName: Run Integration tests
        inputs:
          dockerComposeFile: core/docker-compose.test.yml
          projectName: $(Build.Repository.Name)
          dockerComposeCommand: up --remove-orphans --abort-on-container-exit --exit-code-from core

      - script: |
          python -m pip install --upgrade pip
          pip install coverage
        displayName: 'Install coverage'

      - script: |
          bash <(curl -s https://codecov.io/bash) -s core/.stats/coverage/core -F core
        displayName: 'Upload to codecov.io'

  - job: eval
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self
        submodules: true
      - task: DockerCompose@0
        displayName: Build Eval
        inputs:
          dockerComposeFile: docker-compose.yml
          additionalDockerComposeFiles: docker-compose.eval.yml
          projectName: $(Build.Repository.Name)
          dockerComposeCommand: build

      - task: DockerCompose@0
        displayName: Run Eval
        inputs:
          dockerComposeFile: docker-compose.yml
          additionalDockerComposeFiles: docker-compose.eval.yml
          projectName: $(Build.Repository.Name)
          dockerComposeCommand: up --remove-orphans --abort-on-container-exit --exit-code-from eval

  - job: publish
    dependsOn:
      - unit_test_backend
      - lint_backend
      - api_integration_tests
      - core_integration_tests
      - eval
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      DOCKER_BUILDKIT: 1
    steps:
      - task: Docker@2
        displayName: Build core image
        inputs:
          command: build
          repository: acctext/core
          dockerfile: core/Dockerfile
          containerRegistry: dockerhub
          tags: |
            latest
            $(Build.SourceVersion)
          arguments: --build-arg BUILDKIT_INLINE_CACHE=1

      - task: Docker@2
        displayName: Push core image
        inputs:
          command: push
          repository: acctext/core
          containerRegistry: dockerhub
          tags: |
            latest
            $(Build.SourceVersion)

      - task: Docker@2
        displayName: Build front-end image
        inputs:
          command: build
          repository: acctext/frontend
          dockerfile: front-end/Dockerfile.builder
          containerRegistry: dockerhub
          buildContext: .
          tags: |
            latest
            $(Build.SourceVersion)
          arguments: --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg ACC_TEXT_API_URL="http://localhost:3001" --build-arg ACC_TEXT_GRAPHQL_URL="http://localhost:3001/_graphql" --build-arg ACC_TEXT_DATA_FILES_BUCKET="http://localhost:3001/accelerated-text-data-files"

      - task: Docker@2
        displayName: Push front-end image
        inputs:
          command: push
          repository: acctext/frontend
          containerRegistry: dockerhub
          tags: |
            latest
            $(Build.SourceVersion)

      - task: Docker@2
        displayName: Build api image
        inputs:
          command: build
          repository: acctext/api
          dockerfile: api/Dockerfile
          containerRegistry: dockerhub
          buildContext: .
          tags: |
            latest
            $(Build.SourceVersion)
          arguments: --build-arg BUILDKIT_INLINE_CACHE=1

      - task: Docker@2
        displayName: Push api image
        inputs:
          command: push
          repository: acctext/api
          containerRegistry: dockerhub
          buildContext: .
          tags: |
            latest
            $(Build.SourceVersion)

      - task: Docker@2
        displayName: Build gf image
        inputs:
          command: build
          repository: acctext/gf
          dockerfile: core/gf/Dockerfile
          containerRegistry: dockerhub
          tags: |
            latest
            $(Build.SourceVersion)
          arguments: --build-arg BUILDKIT_INLINE_CACHE=1

      - task: Docker@2
        displayName: Push gf image
        inputs:
          command: push
          repository: acctext/gf
          containerRegistry: dockerhub
          tags: |
            latest
            $(Build.SourceVersion)
