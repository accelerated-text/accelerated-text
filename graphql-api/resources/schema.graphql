### Enums ----------------------------------------------------------------------

enum DefaultUsage {
    YES
    NO
}

enum Usage {
    YES
    NO
    DONT_CARE
}

enum BlocklyFieldType {
    BOOLEAN
    DEFINITION
    LIST
    STRING
}

#   Taken from: https://www.clips.uantwerpen.be/pages/mbsp-tags
enum PartOfSpeech {
    CC      # conjunction, coordinating  and, or, but
    CD      # cardinal number  five, three, 13%
    DT      # determiner  the, a, these
    EX      # existential there  there were six boys
    FW      # foreign word  mais
    IN      # conjunction, subordinating or preposition  of, on, before, unless
    JJ      # adjective  nice, easy
    JJR     # adjective, comparative  nicer, easier
    JJS     # adjective, superlative  nicest, easiest
    LS      # list item marker
    MD      # verb, modal auxillary  may, should
    NN      # noun, singular or mass  tiger, chair, laughter
    NNS     # noun, plural  tigers, chairs, insects
    NNP     # noun, proper singular  Germany, God, Alice
    NNPS    # noun, proper plural  we met two Christmases ago
    PDT     # predeterminer  both his children
    POS     # possessive ending  's
    PRP     # pronoun, personal  me, you, it
    "PRP$"  # pronoun, possessive  my, your, our
    RB      # adverb  extremely, loudly, hard
    RBR     # adverb, comparative  better
    RBS     # adverb, superlative  best
    RP      # adverb, particle  about, off, up
    SYM     # symbol  %
    TO      # infinitival to  what to do?
    UH      # interjection  oh, oops, gosh
    VB      # verb, base form  think
    VBZ     # verb, 3rd person singular present  she thinks
    VBP     # verb, non-3rd person singular present  I think
    VBD     # verb, past tense  they thought
    VBN     # verb, past participle  a sunken ship
    VBG     # verb, gerund or present participle  thinking is fun
    WDT     # wh-determiner  which, whatever, whichever
    WP      # wh-pronoun, personal  what, who, whom
    "WP$"   # wh-pronoun, possessive  whose, whosever
    WRB     # wh-adverb  where, when
}

### Thesaurus ------------------------------------------------------------------

type ThesaurusResults {
    words:              [ Word! ]!
    offset:             Int!
    limit:              Int
    totalCount:         Int!
}

type Synonyms {
    rootWord:           Word!
    synonyms:           [ Word! ]!
}

type Word {
    id:                 ID!
    partOfSpeech:       PartOfSpeech!
    text:               String!
    # predicate
    # stem
}


### Editor & Organization ------------------------------------------------------

type Editor {
    id:                 ID!
    fullName:           String!
    email:              String
    organization:       Organization!
}

type Organization {
    id:                 ID!
    name:               String!
    concepts:           Concepts!
    dictionary:         DictionaryResults!
    readerFlags:        ReaderFlags!
}


### Reader ---------------------------------------------------------------------

type ReaderFlags {
     id:                ID!
     flags:             [ ReaderFlag! ]!
}

type ReaderFlag {
    id:                 ID!
    name:               String!
}


### Dictionary -----------------------------------------------------------------

type DictionaryResults {
    items:              [ DictionaryItem! ]!
    offset:             Int!
    limit:              Int
    totalCount:         Int!
}

type DictionaryItem {
    id:                 ID!
    name:               String!
    partOfSpeech:       PartOfSpeech
    phrases:            [ Phrase! ]
}

type Phrase {
    id:                 ID!
    text:               String!
    defaultUsage:       DefaultUsage!
    readerFlagUsage:    [ ReaderFlagUsage! ]!
}

type ReaderFlagUsage {
    id:                 ID!
    flag:               ReaderFlag!
    usage:              Usage!
}


### AMR ------------------------------------------------------------------------

type ThematicRole {
     id:                ID!
     fieldType:         BlocklyFieldType!
     fieldLabel:        String!
}

type Concept {
     id:                ID!
     label:             String!
     dictionaryItem:    DictionaryItem!
     roles:             [ ThematicRole! ]
     helpText:          String!
}

type Concepts {
     id:                ID!
     concepts:          [ Concept! ]
}


### DocumentPlan --------------------------------------------------------------

type DocumentPlan {
     id:                ID!
     uid:               ID!
     name:              String!
     contextId:         String!
     blocklyXml:        String!
     documentPlan:      String!
     dataId:            String
     dataSampleId:      String
     dataSampleRow:     Int
}

type DocumentPlanResults {
     items:           [ DocumentPlan! ]
     offset:             Int!
     limit:              Int
     totalCount:         Int!
}


### QuickSearch ----------------------------------------------------------------

union QuickSearchItem = Concept | DictionaryItem | Word

type QuickSearchResults {
    items:              [ QuickSearchItem! ]!
    offset:             Int!
    limit:              Int
    totalCount:         Int!
}

### Queries --------------------------------------------------------------------

type Query {

    ### Thesaurus

    searchThesaurus(
        query:              String!
        partOfSpeech:       PartOfSpeech
    ):  ThesaurusResults!

    synonyms(
        wordId:             ID!
    ):  Synonyms!

    ### Editor & Organization

    me:                     Editor!

    ### Reader

    readerFlags:            ReaderFlags!

    ### Dictionary

    dictionary:             DictionaryResults!

    dictionaryItem(
        id:                 ID!
    ):  DictionaryItem


    ### DocumentPlan

    documentPlans:          DocumentPlanResults!
    documentPlan(
        id:                 ID!
    ):  DocumentPlan

    ### AMR
    concepts:               Concepts!
    concept(
        id:                 ID!
    ):  Concept

    ### quickSearch

    quickSearch(
        query:              String
    ):  QuickSearchResults!
}


### Mutations ------------------------------------------------------------------

type Mutation {

    ### Dictionary

    createDictionaryItem(
        name:               String!
        partOfSpeech:       PartOfSpeech  # default = VB
    ):  DictionaryItem!

    updateDictionaryItem(
        id:                 ID!
        name:               String
        partOfSpeech:       PartOfSpeech
    ):  DictionaryItem!

    deleteDictionaryItem(
        id:                 ID!
    ): Boolean!

    createPhrase(
        dictionaryItemId:   ID!
        text:               String!
        defaultUsage:       DefaultUsage  # default = YES
    ):  DictionaryItem!

    updatePhrase(
        id:                 ID!
        text:               String!
    ):  Phrase!

    deletePhrase(
        id:                 ID!
    ):  DictionaryItem!

    updatePhraseDefaultUsage(
        id:                 ID!
        defaultUsage:       DefaultUsage!
    ):  Phrase!

    updateReaderFlagUsage(
        id:                 ID!
        usage:              Usage!
    ):  ReaderFlagUsage!
}


### Schema ---------------------------------------------------------------------

schema {
    query:              Query
    mutation:           Mutation
}
