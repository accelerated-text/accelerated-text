### Enums

enum Usage {
    YES
    NO
    DONT_CARE
}

enum DefaultUsage {
    YES
    NO
}

#   Taken from: https://www.clips.uantwerpen.be/pages/mbsp-tags
enum PartOfSpeech {
    CC      # conjunction, coordinating  and, or, but
    CD      # cardinal number  five, three, 13%
    DT      # determiner  the, a, these
    EX      # existential there  there were six boys
    FW      # foreign word  mais
    IN      # conjunction, subordinating or preposition  of, on, before, unless
    JJ      # adjective  nice, easy
    JJR     # adjective, comparative  nicer, easier
    JJS     # adjective, superlative  nicest, easiest
    LS      # list item marker
    MD      # verb, modal auxillary  may, should
    NN      # noun, singular or mass  tiger, chair, laughter
    NNS     # noun, plural  tigers, chairs, insects
    NNP     # noun, proper singular  Germany, God, Alice
    NNPS    # noun, proper plural  we met two Christmases ago
    PDT     # predeterminer  both his children
    POS     # possessive ending  's
    PRP     # pronoun, personal  me, you, it
    "PRP$"  # pronoun, possessive  my, your, our
    RB      # adverb  extremely, loudly, hard
    RBR     # adverb, comparative  better
    RBS     # adverb, superlative  best
    RP      # adverb, particle  about, off, up
    SYM     # symbol  %
    TO      # infinitival to  what to do?
    UH      # interjection  oh, oops, gosh
    VB      # verb, base form  think
    VBZ     # verb, 3rd person singular present  she thinks
    VBP     # verb, non-3rd person singular present  I think
    VBD     # verb, past tense  they thought
    VBN     # verb, past participle  a sunken ship
    VBG     # verb, gerund or present participle  thinking is fun
    WDT     # wh-determiner  which, whatever, whichever
    WP      # wh-pronoun, personal  what, who, whom
    "WP$"   # wh-pronoun, possessive  whose, whosever
    WRB     # wh-adverb  where, when
}


### Editor

type Organization {
    id:             ID!
    name:           String!
    dictionary:     Dictionary!
    readerFlags:    ReaderFlags!
}

type Editor {
    id:             ID!
    fullName:       String!
    email:          String
    organization:   Organization!
}


### Thesaurus

type Word {
    id:             ID!
    partOfSpeech:   PartOfSpeech!
    text:           String!
    # Predicate
    # Stem
}

type Synonyms {
    rootWord:       Word!
    synonyms:       [ Word! ]!
}

type ThesaurusResults {
    words:          [ Word! ]!
    offset:         Int!
    limit:          Int
    totalCount:     Int!
}


### Reader

type ReaderFlag {
    id:             ID!
    name:           String!
}

type ReaderFlags {
     id:            ID!
     flags:         [ ReaderFlag! ]!
}


### Dictionary


type ReaderFlagUsage {
    id:             ID!
    flag:           ReaderFlag!
    usage:          Usage!
}

type PhraseUsage {
    id:             ID!
    phrase:         String!
    defaultUsage:   DefaultUsage!
    readerUsage:    [ ReaderFlagUsage! ]!
}

type DictionaryItem {
    id:             ID!
    name:           String!
    partOfSpeech:   PartOfSpeech
    phraseUsage:    [ PhraseUsage! ]!
}

type DicionaryResults {
     items:         [ DictionaryItem! ]!
     offset:         Int!
     limit:          Int
     totalCount:     Int!  
}


### Queries

type Query {

    me:                         Editor!


    dictionary:                 DictionaryResults!

    dictionaryItem(
        id:         ID!
    ):  DictionaryItem


    readerFlags:                ReaderFlags!


    searchThesaurus(
        query:        String,
        partOfSpeech: PartOfSpeech,
    ):  ThesaurusResults!

    synonyms(
        wordId:     ID!
    ):  Synonyms!
}

type Mutation {

     createDictionaryItem(
        name:             String!
        partOfSpeech:     PartOfSpeech
     ): DictionaryItem!

     updateDictionaryItem(
        id:               ID!
        name:             String
        partOfSpeech:     PartOfSpeech
     ): DictionaryItem!

     deleteDictionaryItem(
        id:               ID!
     ): Boolean!

    createPhraseUsage(
        dictionaryItemId: ID!
        phrase:           String!
        defaultUsage:     DefaultUsage
    ):  DictionaryItem!

    deletePhraseUsage(
        id:           ID!
    ):  DictionaryItem!

    updatePhraseUsage(
        id:           ID!
        phrase:       String!
    ):  PhraseUsage!

    updatePhraseUsageDefault(
        id:           ID!
        defaultUsage: DefaultUsage!
    ):  PhraseUsage!

    updateReaderFlagUsage(
        id:           ID!
        usage:        Usage!
    ):  ReaderFlagUsage!

    
}

schema {
    query:    Query
    mutation: Mutation
}
