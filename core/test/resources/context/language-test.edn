{:amr
  {"ParadigmsLav.mkN/Str->N"
   {:id     "ParadigmsLav.mkN/Str->N"
    :kind   "N"
    :name   "Str -> N"
    :label  "mkN"
    :module "ParadigmsLav"
    :roles  ({:type "Str" :label "Str"})
    :frames
            ({:examples ["-"]
              :syntax
                        ({:ret    "N"
                          :value  "ParadigmsLav.mkN"
                          :params ({:id "ARG0" :type "Str"})
                          :type   :oper})})}
   "mkText/Cl->Text"
   {:id    "mkText/Cl->Text"
    :kind  "Text"
    :name  "Cl -> Text"
    :label "mkText"
    :roles ({:type "Cl" :label "Cl"})
    :frames
           ({:examples ["she sleeps."]
             :syntax
                       ({:ret    "Text"
                         :value  "mkText"
                         :params ({:id "ARG0" :type "Cl"})
                         :type   :oper})})}
   "ParadigmsEst.mkN/Str->N"
   {:id     "ParadigmsEst.mkN/Str->N"
    :kind   "N"
    :name   "Str -> N"
    :label  "mkN"
    :module "ParadigmsEst"
    :roles  ({:type "Str" :label "Str"})
    :frames
            ({:examples ["predictable nouns covers 90%"]
              :syntax
                        ({:ret    "N"
                          :value  "ParadigmsEst.mkN"
                          :params ({:id "ARG0" :type "Str"})
                          :type   :oper})})}
   "IBxpytAHCvtfhCih"
   {:id    "IBxpytAHCvtfhCih"
    :label "language-test"
    :kind  "Str"
    :semantic-graph
           {:acc-text.nlg.semantic-graph/relations
            ({:from :01 :to :02 :role :segment}
             {:from :02 :to :03 :role :instance}
             {:from :03 :to :04 :role :statement}
             {:from :03 :to :11 :role :statement}
             {:from :03 :to :18 :role :statement}
             {:from :03 :to :25 :role :statement}
             {:from :03 :to :32 :role :statement}
             {:from :04 :to :05 :role :predicate}
             {:from :04 :to :08 :role :expression}
             {:from :05 :to :06 :role :comparable}
             {:from :05 :to :07 :role :comparable}
             {:from       :08
              :to         :09
              :role       :ARG0
              :attributes {:name "N" :label "N"}}
             {:from       :09
              :to         :10
              :role       :ARG0
              :attributes {:name "Str" :label "Str"}}
             {:from :11 :to :12 :role :predicate}
             {:from :11 :to :15 :role :expression}
             {:from :12 :to :13 :role :comparable}
             {:from :12 :to :14 :role :comparable}
             {:from       :15
              :to         :16
              :role       :ARG0
              :attributes {:name "N" :label "N"}}
             {:from       :16
              :to         :17
              :role       :ARG0
              :attributes {:name "Str" :label "Str"}}
             {:from :18 :to :19 :role :predicate}
             {:from :18 :to :22 :role :expression}
             {:from :19 :to :20 :role :comparable}
             {:from :19 :to :21 :role :comparable}
             {:from       :22
              :to         :23
              :role       :ARG0
              :attributes {:name "N" :label "N"}}
             {:from       :23
              :to         :24
              :role       :ARG0
              :attributes {:name "Str" :label "Str"}}
             {:from :25 :to :26 :role :predicate}
             {:from :25 :to :29 :role :expression}
             {:from :26 :to :27 :role :comparable}
             {:from :26 :to :28 :role :comparable}
             {:from       :29
              :to         :30
              :role       :ARG0
              :attributes {:name "N" :label "N"}}
             {:from       :30
              :to         :31
              :role       :ARG0
              :attributes {:name "Str" :label "Str"}}
             {:from :32 :to :33 :role :predicate}
             {:from :32 :to :36 :role :expression}
             {:from :33 :to :34 :role :comparable}
             {:from :33 :to :35 :role :comparable}
             {:from       :36
              :to         :37
              :role       :ARG0
              :attributes {:name "N" :label "N"}}
             {:from       :37
              :to         :38
              :role       :ARG0
              :attributes {:name "Str" :label "Str"}})
            :acc-text.nlg.semantic-graph/concepts
            ({:id :01 :type :document-plan}
             {:id :02 :type :segment}
             {:id :03 :type :condition}
             {:id :04 :type :if-statement}
             {:id :05 :value "=" :type :comparator}
             {:id :06 :type :constant :attributes {:name "*Language"}}
             {:id :07 :type :quote :value "Eng"}
             {:id :08 :type :amr :value "MqWeaiRBBhKshYpa"}
             {:id :09 :type :amr :value "ParadigmsEng.mkN/Str->N"}
             {:id :10 :type :reference :attributes {:name "item"}}
             {:id :11 :type :if-statement}
             {:id :12 :value "=" :type :comparator}
             {:id :13 :type :constant :attributes {:name "*Language"}}
             {:id :14 :type :quote :value "Est"}
             {:id :15 :type :amr :value "MqWeaiRBBhKshYpa"}
             {:id :16 :type :amr :value "ParadigmsEst.mkN/Str->N"}
             {:id :17 :type :reference :attributes {:name "item"}}
             {:id :18 :type :if-statement}
             {:id :19 :value "=" :type :comparator}
             {:id :20 :type :constant :attributes {:name "*Language"}}
             {:id :21 :type :quote :value "Ger"}
             {:id :22 :type :amr :value "MqWeaiRBBhKshYpa"}
             {:id :23 :type :amr :value "ParadigmsGer.mkN/Str->N"}
             {:id :24 :type :reference :attributes {:name "item"}}
             {:id :25 :type :if-statement}
             {:id :26 :value "=" :type :comparator}
             {:id :27 :type :constant :attributes {:name "*Language"}}
             {:id :28 :type :quote :value "Lav"}
             {:id :29 :type :amr :value "MqWeaiRBBhKshYpa"}
             {:id :30 :type :amr :value "ParadigmsLav.mkN/Str->N"}
             {:id :31 :type :reference :attributes {:name "item"}}
             {:id :32 :type :if-statement}
             {:id :33 :value "=" :type :comparator}
             {:id :34 :type :constant :attributes {:name "*Language"}}
             {:id :35 :type :quote :value "Rus"}
             {:id :36 :type :amr :value "MqWeaiRBBhKshYpa"}
             {:id :37 :type :amr :value "ParadigmsRus.mkN/Str->N"}
             {:id :38 :type :reference :attributes {:name "item"}})}
    :roles [{:id "ARG0" :label "item" :type "Str"}]}
   "MqWeaiRBBhKshYpa"
   {:id    "MqWeaiRBBhKshYpa"
    :label "language-test"
    :kind  "Str"
    :semantic-graph
           {:acc-text.nlg.semantic-graph/relations
            ({:from :01 :to :02 :role :segment}
             {:from :02 :to :03 :role :instance}
             {:from       :03
              :to         :04
              :role       :ARG0
              :attributes {:name "Cl" :label "Cl"}}
             {:from       :04
              :to         :05
              :role       :ARG0
              :attributes {:name "N" :label "N"}})
            :acc-text.nlg.semantic-graph/concepts
            ({:id :01 :type :document-plan}
             {:id :02 :type :segment}
             {:id :03 :type :amr :value "mkText/Cl->Text"}
             {:id :04 :type :amr :value "mkCl/N->Cl"}
             {:id :05 :type :reference :attributes {:name "N"}})}
    :roles [{:id "ARG0" :label "N" :type "N"}]}
   "ParadigmsGer.mkN/Str->N"
   {:id     "ParadigmsGer.mkN/Str->N"
    :kind   "N"
    :name   "Str -> N"
    :label  "mkN"
    :module "ParadigmsGer"
    :roles  ({:type "Str" :label "Str"})
    :frames
            ({:examples ["die Stufe-Stufen der Tisch-Tische"]
              :syntax
                        ({:ret    "N"
                          :value  "ParadigmsGer.mkN"
                          :params ({:id "ARG0" :type "Str"})
                          :type   :oper})})}
   "ParadigmsRus.mkN/Str->N"
   {:id     "ParadigmsRus.mkN/Str->N"
    :kind   "N"
    :name   "Str -> N"
    :label  "mkN"
    :module "ParadigmsRus"
    :roles  ({:type "Str" :label "Str"})
    :frames
            ({:examples ["-"]
              :syntax
                        ({:ret    "N"
                          :value  "ParadigmsRus.mkN"
                          :params ({:id "ARG0" :type "Str"})
                          :type   :oper})})}
   "mkCl/N->Cl"
   {:id    "mkCl/N->Cl"
    :kind  "Cl"
    :name  "N -> Cl"
    :label "mkCl"
    :roles ({:type "N" :label "N"})
    :frames
           ({:examples ["there is a house"]
             :syntax
                       ({:ret    "Cl"
                         :value  "mkCl"
                         :params ({:id "ARG0" :type "N"})
                         :type   :oper})})}
   "ParadigmsEng.mkN/Str->N"
   {:id     "ParadigmsEng.mkN/Str->N"
    :kind   "N"
    :name   "Str -> N"
    :label  "mkN"
    :module "ParadigmsEng"
    :roles  ({:type "Str" :label "Str"})
    :frames
            ({:examples ["plural s incl. flash-flashes fly-flies"]
              :syntax
                        ({:ret    "N"
                          :value  "ParadigmsEng.mkN"
                          :params ({:id "ARG0" :type "Str"})
                          :type   :oper})})}}}