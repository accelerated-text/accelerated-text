(ns acc-text.nlg.verbnet.cf
  (:require [acc-text.nlg.gf.cf-format :as cf]
            [clojure.string :as string]))

(defn build-grammars
  ;; Joins together syntax generated by grammar, root node and variable declarations creating full CF grammar
  [frames root variables]
  (concat
   (list root)
   frames
   variables))

(defn frame->cf
  ;; Takes single syntax and converts to CF grammar row
  ;; syntax-type: string by which it will be refered in grammar, eg. `AMR1`
  ;; themrole-idx: Mapping for values. Eg. `Agent` should be `NP0`, this map shows what value to use inside grammar
  ;; syntax: syntax directly from verbnet frame
  [syntax-type themrole-idx {syntax :syntax}]
  (cf/gf-syntax-item "Compl" syntax-type (string/join " " (map
                                                           (fn
                                                             [{:keys [pos value]}]
                                                             (case pos
                                                               :NP (get themrole-idx value)
                                                               :LEX (format "\"%s\"" value)
                                                               :VERB "V2" ;; We may need similar mapping as for NP, in case there would be more than one verb
                                                               :PREP (format "\"%s\"" value)))
                                                           syntax))))

(defn vn->cf
  ;; Converts verbnet into CF grammar
  ;; NOTE: this creates fully fledged grammar. Usually it should be just a part of our grammar
  [{:keys [members frames thematic-roles]}]
  (let [themrole-idx (into {} (map-indexed (fn [idx {type :type}] [type (format "NP%d" idx)]) thematic-roles))
        root         (cf/gf-syntax-item "Pred" "S" "VP")
        variables    (concat
                      (map (fn [{name :name}] (cf/gf-morph-item "Action" "V2" name)) members)
                      (map (fn [[k v]] (cf/gf-morph-item "Actor" v (cf/data-morphology-value k))) themrole-idx))]
    (-> (partial frame->cf "VP" themrole-idx)
        (map frames)
        (build-grammars root variables))))

